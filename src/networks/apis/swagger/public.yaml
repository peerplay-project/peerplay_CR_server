openapi: 3.0.3
info:
  title: Peerplay CR Server - Public Router API
  version: 1.0.0
  description: Public API for Peerplay CR Server (Accessible over Internet)
servers:
  - url: http://localhost:5985
    description: Local server
tags:
  - name: Swagger
    description: Open Swagger UI Documentation
  - name: Authentication
    description: Manage Authentication
  - name: /account/filter
    description: Get or Manage Filter
  - name: /network/general
    description: Get and manage general network settings
  - name: /console/ip_settings
    description: Get and manage general console ip settings
paths:
  /swagger:
    get:
      summary: Get Swagger UI
      description: Returns the Swagger UI for the public router API.
      tags:
        - Swagger
      responses:
        "200":
          description: Success
  /auth/register:
    post:
      summary: User registration
      description: Registers a new user.
      tags:
        - Authentication
      parameters:
        - in: query
          name: username
          description: Username of the user to register.
          schema:
            type: string
          required: true
        - in: query
          name: email
          description: Email of the user to register.
          schema:
            type: string
            format: email
          required: true
        - in: query
          name: password
          description: Password of the user to register.
          schema:
            type: string
          required: true
        - in: query
          name: confirmPassword
          description: Confirm password of the user to register.
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Success
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
  /auth/login:
    post:
      summary: User login
      description: Authenticates a user and generates a JWT token.
      tags:
        - Authentication
      parameters:
        - in: query
          name: email
          description: Email of the user to login.
          schema:
            type: string
            format: email
          required: true
        - in: query
          name: password
          description: Password of the user to login.
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Success
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
  /auth/reset_password:
    post:
      summary: Reset Password
      description: Resets the user's password
      tags:
        - Authentication
      parameters:
        - name: email
          in: query
          description: User's email
          required: true
          schema:
            type: string
        - name: resetKey
          in: query
          description: Reset key (Required if oldPassword is not provided)
          required: false
          schema:
            type: string
        - name: oldPassword
          in: query
          description: Old password (Required if resetKey is not provided)
          required: false
          schema:
            type: string
        - name: newPassword
          in: query
          description: New password
          required: true
          schema:
            type: string
        - name: confirmNewPassword
          in: query
          description: Confirm new password
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Password reset successful
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
  /account/filter/filter_settings:
    get:
      tags:
        - /account/filter
      summary: Get filter settings
      description: Returns the current filter settings for the private router API.
      security:
        - JWT: []
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  output:
                    type: object
                    properties:
                      network_type:
                        type: string
                      password:
                        type: string
                      strict_mode:
                        type: boolean
        "400":
          description: Bad Request
  /account/filter/filter_settings/network_type:
    post:
      tags:
        - /account/filter
      summary: Set filter settings (Network Type)
      description: Change the network type.
      security:
        - JWT: []
      parameters:
        - in: query
          name: network_type
          description: >-
            This property represents the type of network used by the user and if it allow other type of network,
            The possible values are:
            - NT1: All users including you are connected to the Internet using Optic Network (FTTH).
            - NT2: All users including you are connected to the Internet using Copper Network (ADSL).
            - NT3: All users including you are connected to the Internet using Mobile Network.
            - ANY: All users including you accept all
          schema:
            type: string
            enum:
              - NT1
              - NT2
              - NT3
              - ANY
            maxLength: 3
          required: true
      responses:
        "200":
          description: Success
        "400":
          description: Bad Request
  /account/filter/filter_settings/password_key:
    post:
      tags:
        - /account/filter
      summary: Set filter settings (Change Network Key for a Password Key)
      description: Change the network key of the filter settings by a Password Key
      security:
        - JWT: []
      parameters:
        - in: query
          name: random_password
          description: This property represents the password_key used for filter the network (used for private / party networks)
          schema:
            type: boolean
        - in: query
          name: network_key
          description: This property represents the password_key used for filter the network (used for private / party networks)
          schema:
            type: string
            maxLength: 32
            allowEmptyValue: true
      responses:
        "200":
          description: Success
        "400":
          description: Bad Request
  /account/filter/filter_settings/geographic_key:
    post:
      tags:
        - /account/filter
      summary: Set filter settings (Change Network Key for a Geographic Key)
      description: Change the network key of the filter settings by a Geographic Key
      security:
        - JWT: []
      parameters:
        - in: query
          name: geographic_network_type
          description: >-
            Choose Geographic Key Type
            - WORLD: Connect to the Global Public Network
            - CONTINENTAL: Connect to your continental Public Network
            - COUNTRY: Connect to your country Public Network
          schema:
            type: string
            enum:
              - WORLD
              - CONTINENTAL
              - COUNTRY
        - in: query
          name: continent
          description: >-
            Choose Geographic Continent
            - AM: North America and South America
            - EU: Europe
            - AS: Asie 
            - AF: North America and South America
            - OC: Europe
          schema:
            type: string
            enum:
              - AM
              - EU
              - AS
              - AF
              - OC
        - in: query
          name: country
          description: This property represents your country, you must write the possible short form
          schema:
            type: string
      responses:
        "200":
          description: Success
        "400":
          description: Bad Request
  /network/general/status:
    get:
      summary: Get Network Status
      description: Returns the status of the network.
      tags:
        - /network/general
      responses:
        "200":
          description: Success
  /console/ip_settings/get_ip_address:
    get:
      summary: Get IP Address
      description: Returns the IP address of the server.
      tags:
        - /console/ip_settings
      security:
        - JWT: []
      responses:
        "200":
          description: Success
        "401":
          description: Your JWT Token is invalid or missing (Use Authorize with a Valid JWT Token)
        "503":
          description: Your Position in the P2P Database is out of IP Range (Please contact the creator of the project)
components:
  securitySchemes:
    JWT: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
